// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TodosProject.Infra.Data.Context;

namespace TodosProject.Infra.Data.Migrations
{
    [DbContext(typeof(TodosProjectContext))]
    [Migration("20210804131342_create_table_todo")]
    partial class create_table_todo
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TodosProject.Domain.Entities.AccessGroup", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnName("Created_Time")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("Description")
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<long>("IdOrganization")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Is_Active")
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasColumnType("VARCHAR(300)");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnName("Update_Time")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("IdOrganization");

                    b.ToTable("AccessGroups");
                });

            modelBuilder.Entity("TodosProject.Domain.Entities.AccessGroupUser", b =>
                {
                    b.Property<long>("IdAccessGroup")
                        .HasColumnName("Id_AccessGroup")
                        .HasColumnType("bigint");

                    b.Property<long>("IdUser")
                        .HasColumnName("Id_User")
                        .HasColumnType("bigint");

                    b.HasKey("IdAccessGroup", "IdUser");

                    b.HasIndex("IdUser");

                    b.HasIndex("IdAccessGroup", "IdUser")
                        .IsUnique();

                    b.ToTable("AccessGroupUsers");
                });

            modelBuilder.Entity("TodosProject.Domain.Entities.Address", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Cep")
                        .HasColumnName("Cep")
                        .HasColumnType("VARCHAR(10)");

                    b.Property<string>("City")
                        .HasColumnName("City")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("Complement")
                        .HasColumnName("Complement")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("Neighborhood")
                        .HasColumnName("Neighborhood")
                        .HasColumnType("VARCHAR(225)");

                    b.Property<string>("Number")
                        .HasColumnName("Number")
                        .HasColumnType("VARCHAR(10)");

                    b.Property<string>("PublicPlace")
                        .HasColumnName("PublicPlace")
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<string>("State")
                        .HasColumnName("State")
                        .HasColumnType("CHAR(2)");

                    b.HasKey("Id");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("TodosProject.Domain.Entities.License", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ActivationDate")
                        .HasColumnName("Activation_Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CodeID")
                        .HasColumnName("Code_ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnName("Created_Time")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnName("Expiration_Date")
                        .HasColumnType("datetime2");

                    b.Property<long>("IdOrganization")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Is_Active")
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("MaxFileCapacity")
                        .HasColumnName("Max_File_Capacity")
                        .HasColumnType("int");

                    b.Property<long>("MultiplayerMinutes")
                        .HasColumnName("Multiplayer_Minutes")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnName("Update_Time")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("IdOrganization");

                    b.ToTable("Licenses");
                });

            modelBuilder.Entity("TodosProject.Domain.Entities.Organization", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnName("Created_Time")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("Description")
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<long?>("IdAddress")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Is_Active")
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Logo")
                        .HasColumnName("Logo")
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasColumnType("VARCHAR(300)");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnName("Update_Time")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("IdAddress")
                        .IsUnique()
                        .HasFilter("[IdAddress] IS NOT NULL");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("TodosProject.Domain.Entities.OrganizationUser", b =>
                {
                    b.Property<long>("IdOrganization")
                        .HasColumnName("Id_Organization")
                        .HasColumnType("bigint");

                    b.Property<long>("IdUser")
                        .HasColumnName("Id_User")
                        .HasColumnType("bigint");

                    b.Property<long>("IdProfile")
                        .HasColumnName("Id_Profile")
                        .HasColumnType("bigint");

                    b.HasKey("IdOrganization", "IdUser");

                    b.HasIndex("IdProfile");

                    b.HasIndex("IdUser");

                    b.HasIndex("IdOrganization", "IdUser")
                        .IsUnique();

                    b.ToTable("OrganizationUsers");
                });

            modelBuilder.Entity("TodosProject.Domain.Entities.Phone", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("IdOrganization")
                        .HasColumnType("bigint");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnName("Number")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("IdOrganization");

                    b.ToTable("Phones");
                });

            modelBuilder.Entity("TodosProject.Domain.Entities.Profile", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("AccessGroup")
                        .HasColumnName("Access_Group")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnName("Created_Time")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("Description")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Is_Active")
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<byte>("LoginType")
                        .HasColumnName("Login_Type")
                        .HasColumnType("tinyint");

                    b.Property<byte>("ProfileType")
                        .HasColumnName("Profile_Type")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnName("Update_Time")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Profiles");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AccessGroup = (byte)0,
                            CreatedTime = new DateTime(2021, 8, 4, 10, 13, 41, 498, DateTimeKind.Local).AddTicks(5469),
                            Description = "Perfil Usuário",
                            IsActive = true,
                            LoginType = (byte)1,
                            ProfileType = (byte)0
                        },
                        new
                        {
                            Id = 2L,
                            AccessGroup = (byte)0,
                            CreatedTime = new DateTime(2021, 8, 4, 10, 13, 41, 499, DateTimeKind.Local).AddTicks(5926),
                            Description = "Perfil Administrador",
                            IsActive = true,
                            LoginType = (byte)1,
                            ProfileType = (byte)1
                        },
                        new
                        {
                            Id = 3L,
                            AccessGroup = (byte)0,
                            CreatedTime = new DateTime(2021, 8, 4, 10, 13, 41, 499, DateTimeKind.Local).AddTicks(5970),
                            Description = "Perfil Manager",
                            IsActive = true,
                            LoginType = (byte)1,
                            ProfileType = (byte)2
                        });
                });

            modelBuilder.Entity("TodosProject.Domain.Entities.ProfileRole", b =>
                {
                    b.Property<long>("IdProfile")
                        .HasColumnName("Id_Profile")
                        .HasColumnType("bigint");

                    b.Property<long>("IdRole")
                        .HasColumnName("Id_Role")
                        .HasColumnType("bigint");

                    b.HasKey("IdProfile", "IdRole");

                    b.HasIndex("IdRole");

                    b.HasIndex("IdProfile", "IdRole")
                        .IsUnique();

                    b.ToTable("ProfileRoles");

                    b.HasData(
                        new
                        {
                            IdProfile = 1L,
                            IdRole = 1L
                        });
                });

            modelBuilder.Entity("TodosProject.Domain.Entities.Role", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnName("Created_Time")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("Description")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Is_Active")
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("RoleTag")
                        .IsRequired()
                        .HasColumnName("Role")
                        .HasColumnType("nvarchar(80)")
                        .HasMaxLength(80);

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnName("Update_Time")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedTime = new DateTime(2021, 8, 4, 10, 13, 41, 500, DateTimeKind.Local).AddTicks(9903),
                            Description = "Regra de acesso a tela de Auditoria",
                            IsActive = false,
                            RoleTag = "ROLE_AUDIT"
                        });
                });

            modelBuilder.Entity("TodosProject.Domain.Entities.ToDo", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ConcludeDate")
                        .HasColumnName("ConcludeDate_Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnName("Created_Time")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("Description")
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnName("Due_Date")
                        .HasColumnType("datetime2");

                    b.Property<long>("IdUser")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Is_Active")
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnName("Update_Time")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("IdUser");

                    b.ToTable("ToDos");
                });

            modelBuilder.Entity("TodosProject.Domain.Entities.User", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnName("Created_Time")
                        .HasColumnType("datetime2");

                    b.Property<long>("IdProfile")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnName("Is_Active")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAuthenticated")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Is_Authenticated")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LastPassword")
                        .HasColumnName("Last_Password")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnName("Login")
                        .HasColumnType("nvarchar(120)")
                        .HasMaxLength(120);

                    b.Property<string>("Name")
                        .HasColumnName("Name")
                        .HasColumnType("VARCHAR(300)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("Password")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Phone")
                        .HasColumnName("Phone")
                        .HasColumnType("VARCHAR(100)");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnName("Update_Time")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("IdProfile");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedTime = new DateTime(2021, 8, 4, 10, 13, 41, 502, DateTimeKind.Local).AddTicks(7310),
                            IdProfile = 2L,
                            IsActive = true,
                            IsAuthenticated = true,
                            LastPassword = "",
                            Login = "admin@todosproject.com.br",
                            Password = "AQAQJwAAuEITaQ+7EhiaGY0xvrZcqpj/TGbQTcQLsprO1DTtpec="
                        });
                });

            modelBuilder.Entity("TodosProject.Domain.Entities.AccessGroup", b =>
                {
                    b.HasOne("TodosProject.Domain.Entities.Organization", "Organization")
                        .WithMany("AccessGroups")
                        .HasForeignKey("IdOrganization")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TodosProject.Domain.Entities.AccessGroupUser", b =>
                {
                    b.HasOne("TodosProject.Domain.Entities.AccessGroup", "AccessGroup")
                        .WithMany("AccessGroupUsers")
                        .HasForeignKey("IdAccessGroup")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TodosProject.Domain.Entities.User", "User")
                        .WithMany("AccessGroupUsers")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TodosProject.Domain.Entities.License", b =>
                {
                    b.HasOne("TodosProject.Domain.Entities.Organization", "Organization")
                        .WithMany("Licenses")
                        .HasForeignKey("IdOrganization")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TodosProject.Domain.Entities.Organization", b =>
                {
                    b.HasOne("TodosProject.Domain.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("IdAddress")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("TodosProject.Domain.Entities.OrganizationUser", b =>
                {
                    b.HasOne("TodosProject.Domain.Entities.Organization", "Organization")
                        .WithMany("OrganizationUsers")
                        .HasForeignKey("IdOrganization")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TodosProject.Domain.Entities.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("IdProfile")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TodosProject.Domain.Entities.User", "User")
                        .WithMany("OrganizationUsers")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TodosProject.Domain.Entities.Phone", b =>
                {
                    b.HasOne("TodosProject.Domain.Entities.Organization", "Organization")
                        .WithMany("Phones")
                        .HasForeignKey("IdOrganization")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TodosProject.Domain.Entities.ProfileRole", b =>
                {
                    b.HasOne("TodosProject.Domain.Entities.Profile", "Profile")
                        .WithMany("ProfileRoles")
                        .HasForeignKey("IdProfile")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TodosProject.Domain.Entities.Role", "Role")
                        .WithMany("ProfileRoles")
                        .HasForeignKey("IdRole")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TodosProject.Domain.Entities.ToDo", b =>
                {
                    b.HasOne("TodosProject.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TodosProject.Domain.Entities.User", b =>
                {
                    b.HasOne("TodosProject.Domain.Entities.Profile", "Profile")
                        .WithMany("Users")
                        .HasForeignKey("IdProfile")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
